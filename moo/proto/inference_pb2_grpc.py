# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import moo.proto.inference_pb2 as inference__pb2


class InferenceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Scale = channel.unary_unary(
        '/inference.Inference/Scale',
        request_serializer=inference__pb2.ScaleRequest.SerializeToString,
        response_deserializer=inference__pb2.ScaleResponse.FromString,
        )
    self.Predict = channel.unary_unary(
        '/inference.Inference/Predict',
        request_serializer=inference__pb2.PredictRequest.SerializeToString,
        response_deserializer=inference__pb2.PredictResponse.FromString,
        )


class InferenceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Scale(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Predict(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_InferenceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Scale': grpc.unary_unary_rpc_method_handler(
          servicer.Scale,
          request_deserializer=inference__pb2.ScaleRequest.FromString,
          response_serializer=inference__pb2.ScaleResponse.SerializeToString,
      ),
      'Predict': grpc.unary_unary_rpc_method_handler(
          servicer.Predict,
          request_deserializer=inference__pb2.PredictRequest.FromString,
          response_serializer=inference__pb2.PredictResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'inference.Inference', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
